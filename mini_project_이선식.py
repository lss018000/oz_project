# -*- coding: utf-8 -*-
"""Mini_Project_이선식.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B2E4xM0YpM9_ebHfFYtfp0qyCAiTlY_p

## Mini project [행맨 게임 제작]

안녕하세요.
수강생 여러분~! Chapter17 ~ 20 수업은 잘 들으셨나요?

여러분의 모든 역량을 총 동원해 문제를 풀어주셨합니다.



#### 과제 설명

이번 개발 주제는 '행맨' 게임이구요.

행맨 게임은 아주 유명한 단어 퀴즈 프로그램이예요

어떤 단어가 주어지면 그 단어의 길이만큼 빈 칸(밑줄) 이 주어지고
플레이어는 알파벳을 하나씩 얘기하면서 단어를 추측해요!

10번만에 맞히지 못하면 게임이 끝납니다. 🥲

#### 예시를 들어볼께요!!

만약 E 가 단어에 포함돼있다면, 해당하는 위치에 E 를 표시해줍니다

_ _ _ _ E E
이렇게 되겠네요.

이번에는 A를 해볼께요
A 는 포함되지 않으므로 기회가 줄어들고 지금까지 맞힌 내용 그대로 출력합니다.

_ _ _ _ E E
변화가 없지요.

이번에는 C 를 해봅시다.

그럼
C _ _ _ E E

다음에는 F 를
C _ F F E E

마지막으로 O 를 해보면
C O F F E E 로 게임은 성공으로 끝나게 됩니다.

##본격적인 행맨 게임 규칙 설명

- words 리스트에 추가된 단어들을 사용해주세요
  - words = ["apple", "banana", "orange", "grape", "lemon"]

- 단어의 길이에 맞게 밑줄을 출력해주세요  
  (예)banana의 경우 _ _ _ _ _ _

- 사용자부터 1글자씩 입력을 받되,
   - 단어에 입력값이 포함되면 "단어를 맞추셨군요. 더 힘내봐요"라고 출력해주세요"
   - 단어에 입력값이 포함되어 있지 않다면 "틀렸습니다. 남은 시도 횟수 "란 메시지와 함꼐 남은 횟수를 출력해주세요

- 매번 입력을 받을 때마다 현재까지 맞힌 글자들 표시(맞히면 글자는 밑줄 출력)
    - 예) a 입력 시 : a _ _ _ _
          p 입력 시 : a p p _ _
          c 입력 시 : a p p _ _

- 모든 단어를 맞췄을 경우 "축하합니다! 단어를 맞추셨습니다"와 시도 횟수를 출력해주세요


행맨은 정말 유명 게임으로 찾아볼 수 있는 자료들이 많습니다.   
문제가 어려우신 경우 구글링 통해 문제를 해결해보세요.
"""

import random

# 게임에 사용될 단어 목록
words = ["apple", "banana", "orange", "grape", "lemon"]

class hangman:
    def __init__(self):
        self.word = random.choice(words)  # 랜덤으로 단어 선택
        self.guesses = set()
        self.chance = 10

    def play_game(self):
        word_len = len(self.word)
        word_slice = list(self.word)
        word_hide = []
        for i in self.word:
            word_hide.append('_')

        i = 0
        input_list = []
        while i < 10:
            if ''.join(word_hide) == self.word:
                print('축하합니다! 단어를 맞추셨습니다\n')
                break
            else:
                input__val = str(input('알파벳을 입력하세요.').lower())

                if input__val in input_list:
                    print(f'{input__val}이미 입력하신 알파벳입니다.\n')
                else:
                    if input__val in self.word:
                        for j in range(word_len):
                            if word_slice[j] == input__val:
                                word_hide[j] = input__val
                            else:
                                word_hide[j] = word_hide[j]

                        print(' '.join(word_hide))
                        print('단어를 맞추셨군요. 더 힘내봐요')

                    else:
                        print(' '.join(word_hide))
                        print('틀렸습니다."')

                    i += 1
                    print(f'남은 시도 횟수  : {10 - i}회\n\n')
                    input_list.append(input__val)

        else:
            print("10번의 기회 모두 소진되었습니다..\n")

go_hangman = hangman()
go_hangman.play_game()

# 기본 라이브러리라 파이썬 설치시 자동으로 설치됩니다!
# random 모듈은 랜덤한 숫자를 생성할 때 사용합니다.
import random

# 게임에 사용될 단어 목록
words = ["apple", "banana", "orange", "grape", "lemon"]

# 행맨 그림
hangman_pics = [
    """
     ------
     |    |
     |
     |
     |
     |
    ---""",
    """
     ------
     |    |
     |    O
     |
     |
     |
    ---""",
    """
     ------
     |    |
     |    O
     |    |
     |
     |
    ---""",
    """
     ------
     |    |
     |    O
     |   /|
     |
     |
    ---""",
    """
     ------
     |    |
     |    O
     |   /|\\
     |
     |
    ---""",
    """
     ------
     |    |
     |    O
     |   /|\\
     |   /
     |
    ---""",
    """
     ------
     |    |
     |    O
     |   /|\\
     |   / \\
     |
    ---""",
]


class HangmanGame:
    # 클래스가 만들어 질 때 자동으로 호출되는 메소드
    # (생성자 메소드라고 부릅니다)
    def __init__(self):
        self.word = random.choice(words)  # 랜덤으로 단어 선택

        self.guesses = set()  # 추측된 글자 저장

        self.attempts = 6  # 시도 횟수

    def display(self):
        # 단어의 현재 상태 표시
        result = ""

        # 위에서 설정한 단어의 글자들을 하나씩 가져옵니다.
        for char in self.word:
            # 만약 추측된 글자가 설정한 단어에 포함되어 있다면
            if char in self.guesses:
                # 추측된 글자를 표시합니다.
                result += char
            else:
                # 추측된 글자가 아니라면 _를 표시합니다.
                result += "_"

        # 단어의 현재 상태를 반환합니다.
        return result

    def play(self):
        # 게임을 시작합니다.
        # 시도 횟수가 0이 될 때까지 반복합니다.
        while self.attempts > 0:
            # 행맨 그림을 표시합니다.
            print(hangman_pics[6 - self.attempts])

            # 현재 단어의 상태를 표시합니다.
            # (추측된 글자는 표시하고, 추측되지 않은 글자는 _로 표시합니다.)
            # ex)
            # 처음에는 _ _ _ _ _ _ _ _ 로 표시됩니다.
            #
            # a를 추측했다면 a _ _ _ _ _ _ _ 로 표시됩니다.
            print(self.display())

            # 현재까지 추측한 글자들을 표시합니다.
            guess = input("글자를 추측해보세요: ").lower()

            # 추측한 글자가 이미 추측한 글자 목록에 있다면
            if guess in self.guesses:
                print("이미 추측한 글자입니다.")

            # 추측한 글자가 설정한 단어에 포함되어 있지 않다면
            elif guess in self.word:
                # 추측한 글자를 추측한 글자 목록에 추가하고 "단어를 맞추셨군요. 더 힘내봐요"라고 출력해주세요
                self.guesses.add(guess)
                # 단어를 맞추셨군요. 더 힘내봐요"라고 출력해주세요
                # 만약 추측한 글자들이 설정한 단어의 모든 글자를 포함한다면
                if set(self.word).issubset(self.guesses):
                    print(f"축하합니다! 단어를 맞추셨습니다: {self.word}")
                    break
            # 추측한 글자가 설정한 단어에 포함되어 있지 않다면
            else:
                # 시도 횟수를 1 감소시킵니다.
                self.attempts -= 1
                print(f"틀렸습니다. 남은 시도 횟수: {self.attempts}")
            # 시도 횟수가 0이 되었다면
            if self.attempts == 0:
                print(hangman_pics[-1])
                print(f"게임 오버. 정답은: {self.word}")


if __name__ == "__main__":
    game = HangmanGame()
    game.play()